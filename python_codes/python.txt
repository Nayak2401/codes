 matrix = []
 for row in range(1,6):
     mat_row=[]
     for col in range(1, row+1):
         mat_row.append(col)
     matrix.append(mat_row)

 for row in matrix:
     for col in row:
         print(col, end=" ")
     print()
 print("\n\n")

** to build matrix

n = int(input("Enter rows : "))

# pat-1
for row in range(1, n):
    for col in range(1, row+1):
        print(col, end =" ")
    print()

print("\n\n")
# pat-2
for row in range(1, n):
    for col in range(1, row+1):
        print("*", end =" ")
    print()


# build triangle |>

n = int(input("Enter rows : "))
for row in range(1, n):
    for col in range(1, row+1):
        print(col, end =" ")
    print()

for row in range(n,0, -1):
    for col in range(1, row+1):
        print(col, end =" ")
    print()

# program for triangle
row = int(input("enter the value of row: "))
for i in range(row):
    print(" "*(row-i)+" *"*(i+1))

output
       *
     * *
    * * *
   * * * *
  * * * * *

#
row = int(input("enter the value of row: "))
for i in range(row):
    print(" "*i+"*"*(row-i))

output:
*****
  ****
    ***
     **
       *

# Swapping two number without using 3rd variables

x = 12
y = 24
print("Before swapping")
print("The value of x: ", x, "The value of y: ",y)
x, y = y, x
print("After swapping")
print("The value of x: ", x, "The value of y: ",y)

    or

num1 = 10
num2 = 20
if num1<num2:
    print("before swap", num1,num2)
    num2 = num1 + num2 #30
    num1 = num2 - num1 #20
    num2 = num2 - num1
    print("After swap", num1, num2)
else:
    print("before swap",num1,num2)


# To find the Average of values

Average in Python is usually calculated by adding all the numbers in a list and then dividing it by the number of elements in this list.

There are multiple ways to find the average of a List in Python, and two of the main ways are mentioned below:
1) Python Average: Len() and Sum()
2) Python Average: statistics.mean()

-->
1) Python Average: Len() and Sum()
The Sum() and Len() functions are built-in in Python and are used to find the averages. 
This method of finding the average helps avoid looping through the list and hence is time and effort-saving. This also reduces redundancy and helps maintain DRY code since it helps in finding the average of a list using a single line.
Example 1
numbers = [30, 55, 3, 10, 2]
average = sum(numbers)/len(numbers)
print("Average of list: ", round(average,3))
Output
Average of the list:  20.0
Example 2
num_list = [1, 999, 2, 1023, 223, 876, 32]
average = sum(num_list)/len(num_list)
print("Average of list: ", round(average,2))
Output
Average of the list:  450.86


**Python Average: statistics.mean()

To easily calculate the python average of a list, we can use the statistics moduleâ€™s mean() function. The following examples demonstrate the same.

Example 1 

from statistics import mean
num_list = [30, 55, 3, 10, 2]
average = mean(num_list)
print("Average: ", round(average,3))
Output
Average:  20

Example 2 

from statistics import mean
numbers = [1, 999, 2, 1023, 223, 876, 32]
average = mean(numbers)
print("Average: ", round(average,3))
Output
Average:  450.857

**Fibonacci series

A type of series where each number is the sum of two that precede it.

Ex: 0, 1, 1, 2, 3, 5, 8, 13
I,e.., addition of last two numbers
Ex:
 index = int(input("enter the input: "))
firstnumer = 0
secondnumber = 1
temp = 0
for i in range(0, index):
    temp=firstnumer + secondnumber
    firstnumer = secondnumber
    secondnumber = temp
    print(temp)

	The process in which a function calls itself directly or indirectly is called recursion and the corresponding function is called as recursive function.
Ex:
	def fibonacci(i):
	    if i==0:
	        return 0
	    elif i==1:
	        return 1
	    else:
	        return fibonacci(i-2) + fibonacci(i-1)
	index = int(input("enter the value for fibonacci: "))
	if index <= 0:
	    print("please enter the positive value")
	else:
	    for i in range(0, index):
	        print(fibonacci(i))






