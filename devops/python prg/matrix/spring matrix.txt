def spiral_matrix(matrix):
    result=[]
    while matrix:
        result += matrix.pop(0)
        if matrix and matrix[0]:
            for row in matrix:
                result.append(row.pop())
        if matrix:
            result += matrix.pop()[::-1]
        if matrix and matrix[0]:
            for row in matrix[::-1]:
                result.append(row.pop(0))
        return result
matrix=[
    [1,2,3,4],
    [5,6,7,8],
    [9,10,11,12],
    [13,14,15,16]
]
result=spiral_matrix(matrix)
print(result)


o/p = [1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5]



explaination

Function Definition:


def spiral_matrix(matrix):

The function spiral_matrix takes a 2D matrix as input.
Initialize an Empty Result List:


result = []
result will store the elements of the matrix in spiral order.
While Loop for Traversal:


while matrix:
The loop continues until the matrix is not empty.
Traverse Top Row:


result += matrix.pop(0)
matrix.pop(0) removes and returns the first row of the matrix, adding its elements to the result.
Traverse Right Column:


if matrix and matrix[0]:
    for row in matrix:
        result.append(row.pop())

If there are rows in the matrix and the first row is not empty, traverse the right column by popping the last element from each row.
Traverse Bottom Row in Reverse:


if matrix:
    result += matrix.pop()[::-1]
If there are remaining rows, pop the last row and add its elements to the result in reverse order.
Traverse Left Column in Reverse:


if matrix and matrix[0]:
    for row in matrix[::-1]:
        result.append(row.pop(0))
If there are rows and the first row is not empty, traverse the left column by popping the first element from each row in reverse order.
Return the Result:


return result
The function returns the final result, which is a list containing the elements of the matrix in spiral order.
Example Usage:


matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]

result = spiral_matrix(matrix)
print(result)
This example creates a 3x3 matrix and prints the result of the spiral_matrix function. The output should be [1, 2, 3, 6, 9, 8, 7, 4, 5].











